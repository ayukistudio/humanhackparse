from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import logging
from typing import Optional
import urllib.parse
import httpx
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(module)s:%(lineno)d | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("price_alert.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# FastAPI app
app = FastAPI(title="Price Alert API")

# Telegram Bot configuration
BOT_TOKEN = "7618020293:AAHINb-E14iVQGH57ObNdWN7oRZiVcNmLFM"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# Gmail configuration
# 1. –í–∫–ª—é—á–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ Google: https://myaccount.google.com/security
# 2. –ü–µ—Ä–µ–π–¥–∏ –≤ "–ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π": https://myaccount.google.com/security -> "App passwords"
# 3. –í—ã–±–µ—Ä–∏ "Mail" –∏ "Other", –≤–≤–µ–¥–∏ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "PriceAlert"), –ø–æ–ª—É—á–∏ 16-–∑–Ω–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, abcd efgh ijkl mnop)
# 4. –í—Å—Ç–∞–≤—å —Å–≤–æ–π Gmail –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∏–∂–µ (–ø–∞—Ä–æ–ª—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
SENDER_EMAIL = "your_gmail@gmail.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Gmail
SENDER_PASSWORD = "your_app_password"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (16 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)

class PriceAlertRequest(BaseModel):
    username: str
    old_price: float
    new_price: float
    url: str
    image: str
    userid: str  # Telegram chat_id
    email: str   # Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è

class PriceAlertResponse(BaseModel):
    message: str
    telegram_message: Optional[str] = None
    email_message: Optional[str] = None

async def validate_image_url(image_url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
    async with httpx.AsyncClient(timeout=10.0) as client:
        try:
            response = await client.head(image_url, follow_redirects=True)
            response.raise_for_status()
            content_type = response.headers.get("content-type", "")
            if not content_type.startswith("image/"):
                logger.error(f"URL {image_url} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {content_type}")
                return False
            logger.debug(f"URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª–∏–¥–µ–Ω: {image_url}")
            return True
        except httpx.HTTPError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {str(e)}")
            return False

@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(2),
    retry=retry_if_exception_type(httpx.ReadTimeout),
    before_sleep=lambda retry_state: logger.debug(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retry_state.attempt_number} –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞")
)
async def send_to_telegram(chat_id: str, message: str, image_url: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è chat_id: {chat_id}")
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo_payload = {
                "chat_id": chat_id,
                "photo": image_url,
                "parse_mode": "MarkdownV2"
            }
            photo_response = await client.post(f"{TELEGRAM_API_URL}/sendPhoto", json=photo_payload)
            photo_response.raise_for_status()
            logger.debug("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text_payload = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "MarkdownV2"
            }
            text_response = await client.post(f"{TELEGRAM_API_URL}/sendMessage", json=text_payload)
            text_response.raise_for_status()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è chat_id: {chat_id}")
        except httpx.HTTPStatusError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e.response.status_code} - {e.response.text}", exc_info=True)
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ Telegram API: {e.response.text}")
        except httpx.ReadTimeout as e:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}", exc_info=True)
            raise
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}", exc_info=True)
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

async def send_to_email(recipient_email: str, request: PriceAlertRequest):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É —á–µ—Ä–µ–∑ Gmail SMTP."""
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ {recipient_email}")
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è email
        email_subject = f"Price Drop Alert for {request.username}"
        email_message = (
            f"Dear {request.username},\n\n"
            f"Great news! The item you're tracking has dropped in price:\n"
            f"Old price: {request.old_price:,.2f}\n"
            f"New price: {request.new_price:,.2f}\n\n"
            f"Check it out here: {request.url}\n\n"
            f"Best,\nSauce Tracker Team"
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = recipient_email
        msg['Subject'] = email_subject
        msg.attach(MIMEText(email_message, 'plain'))

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail SMTP
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.sendmail(SENDER_EMAIL, recipient_email, msg.as_string())
        
        logger.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient_email}")
        return email_message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {recipient_email}: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")

def format_telegram_message(request: PriceAlertRequest) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram."""
    logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è username: {request.username}, url: {request.url}")
    
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
    def escape_markdown(text):
        chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in chars:
            text = text.replace(char, f'\\{char}')
        return text

    username = escape_markdown(request.username)
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    old_price = f"{request.old_price:.2f}".replace('.', '\\.')
    new_price = f"{request.new_price:.2f}".replace('.', '\\.')
    url = request.url

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Markdown V2
    message = (
        f"*{username}*, —Å–ø–µ—à–∏–º —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä *–ø–æ–¥–µ—à–µ–≤–µ–ª\\!* üéâ\n"
        f"–£—Å–ø–µ–π—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é *Sauce Tracker*\n\n"
        f"üí∏ *{old_price}* ‚û°Ô∏è *{new_price}*\n\n"
        f"[üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä]({url})"
    )

    logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message}")
    return message

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API."""
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    return {"status": "healthy", "message": "API is running"}

@app.post("/send-telegram-alert", response_model=PriceAlertResponse)
async def send_telegram_alert(request: PriceAlertRequest):
    """API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤ Telegram."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ Telegram: username={request.username}, url={request.url}, userid={request.userid}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not request.url.startswith(("http://", "https://")):
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞ http(s)")
        raise HTTPException(status_code=400, detail="URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
    
    if not request.image.startswith(("http://", "https://")):
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞ http(s)")
        raise HTTPException(status_code=400, detail="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
    
    if request.old_price <= request.new_price:
        logger.warning(f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞ ({request.new_price}) –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä–æ–π ({request.old_price})")
        raise HTTPException(status_code=400, detail="–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä–æ–π")
    
    if request.old_price < 0 or request.new_price < 0:
        logger.error("–¶–µ–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
        raise HTTPException(status_code=400, detail="–¶–µ–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not await validate_image_url(request.image):
        logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {request.image}")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    try:
        telegram_message = format_telegram_message(request)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è username: {request.username}")
        
        await send_to_telegram(request.userid, telegram_message, request.image)
        
        return {
            "message": "Price alert sent to Telegram successfully",
            "telegram_message": telegram_message
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")

@app.post("/send-email-alert", response_model=PriceAlertResponse)
async def send_email_alert(request: PriceAlertRequest):
    """API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ email: username={request.username}, url={request.url}, email={request.email}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not request.url.startswith(("http://", "https://")):
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞ http(s)")
        raise HTTPException(status_code=400, detail="URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
    
    if not request.image.startswith(("http://", "https://")):
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–∞ http(s)")
        raise HTTPException(status_code=400, detail="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
    
    if request.old_price <= request.new_price:
        logger.warning(f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞ ({request.new_price}) –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä–æ–π ({request.old_price})")
        raise HTTPException(status_code=400, detail="–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ —Å—Ç–∞—Ä–æ–π")
    
    if request.old_price < 0 or request.new_price < 0:
        logger.error("–¶–µ–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
        raise HTTPException(status_code=400, detail="–¶–µ–Ω—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
    
    if not "@" in request.email or not "." in request.email:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: {request.email}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not await validate_image_url(request.image):
        logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {request.image}")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
    try:
        email_message = await send_to_email(request.email, request)
        
        return {
            "message": "Price alert sent to email successfully",
            "email_message": email_message
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ email: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ email: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    logger.info("–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8100")
    uvicorn.run(app, host="0.0.0.0", port=8100)